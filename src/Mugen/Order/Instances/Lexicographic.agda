module Mugen.Order.Instances.Lexicographic where

open import Mugen.Prelude
open import Mugen.Order.Lattice

import Mugen.Order.Reasoning as Reasoning

private variable
  o o' r r' : Level

--------------------------------------------------------------------------------
-- Lexicographic Products
-- Section 3.3.4
--
-- The lexicographic product of 2 posets consists of their product
-- as monoids, as well as their lexicographic product as orders.

module _ (A : Poset o r) (B : Poset o' r') where
  private
    module A = Reasoning A
    module B = Reasoning B

  Lexicographic : Poset (o ‚äî o') (o ‚äî r ‚äî r')
  Lexicographic = poset where

    _‚â§_ : ‚àÄ (x y : ‚åû A ‚åü √ó ‚åû B ‚åü) ‚Üí Type (o ‚äî r ‚äî r')
    _‚â§_ x y = x .fst A.‚â§[ x .snd B.‚â§ y .snd ] y .fst

    abstract
      ‚â§-thin : ‚àÄ x y ‚Üí is-prop (x ‚â§ y)
      ‚â§-thin x y = hlevel 1

      ‚â§-refl : ‚àÄ x ‚Üí x ‚â§ x
      ‚â§-refl x = A.‚â§-refl , Œª _ ‚Üí B.‚â§-refl

      ‚â§-trans : ‚àÄ x y z ‚Üí x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
      ‚â§-trans x y z (x1‚â§y1 , x2‚â§y2) (y1‚â§z1 , y2‚â§z2) =
        A.‚â§-trans x1‚â§y1 y1‚â§z1 , Œª x1=z1 ‚Üí
        B.‚â§-trans
          (x2‚â§y2 (A.‚â§-antisym'-l x1‚â§y1 y1‚â§z1 x1=z1))
          (y2‚â§z2 (A.‚â§-antisym'-r x1‚â§y1 y1‚â§z1 x1=z1))

      ‚â§-antisym : ‚àÄ x y ‚Üí x ‚â§ y ‚Üí y ‚â§ x ‚Üí x ‚â° y
      ‚â§-antisym x y (x1‚â§y1 , x2‚â§y2) (y1‚â§x1 , y2‚â§x2) i =
        let x1=y1 = A.‚â§-antisym x1‚â§y1 y1‚â§x1 in
        x1=y1 i , B.‚â§-antisym (x2‚â§y2 x1=y1) (y2‚â§x2 (sym x1=y1)) i

    poset : Poset (o ‚äî o') (o ‚äî r ‚äî r')
    poset .Poset.Ob = ‚åû A ‚åü √ó ‚åû B ‚åü
    poset .Poset._‚â§_ = _‚â§_
    poset .Poset.‚â§-thin = ‚â§-thin _ _
    poset .Poset.‚â§-refl = ‚â§-refl _
    poset .Poset.‚â§-trans = ‚â§-trans _ _ _
    poset .Poset.‚â§-antisym = ‚â§-antisym _ _

module _ {A : Poset o r} {B : Poset o' r'} where
  private
    module A = Reasoning A
    module B = Reasoning B

  --------------------------------------------------------------------------------
  -- Joins

  -- If the following conditions are true, then 'Lex ùíü‚ÇÅ ùíü‚ÇÇ' has joins:
  -- (1) Both ùíü‚ÇÅ and ùíü‚ÇÇ have joins.
  -- (2) ùíü‚ÇÇ has a bottom.
  -- (3) It's decidable in ùíü‚ÇÅ whether an element is equal to its join with another element.
  lex-has-joins
    : (A-joins : has-joins A) (let module A-joins = has-joins A-joins)
    ‚Üí (‚àÄ x y ‚Üí Dec (x ‚â° A-joins.join x y) √ó Dec (y ‚â° A-joins.join x y))
    ‚Üí (B-joins : has-joins B) ‚Üí has-bottom B
    ‚Üí has-joins (Lexicographic A B)

  lex-has-joins A-joins _‚â°‚à®‚ÇÅ?_ B-joins B-bottom = joins
    where
      module A-joins = has-joins A-joins
      module B-joins = has-joins B-joins
      module B-bottom = has-bottom B-bottom

      joins : has-joins (Lexicographic A B)
      joins .has-joins.join (x1 , x2) (y1 , y2) with x1 ‚â°‚à®‚ÇÅ? y1
      ... | yes _ , yes _ = A-joins.join x1 y1 , B-joins.join x2 y2
      ... | yes _ , no  _ = A-joins.join x1 y1 , x2
      ... | no  _ , yes _ = A-joins.join x1 y1 , y2
      ... | no  _ , no  _ = A-joins.join x1 y1 , B-bottom.bot
      joins .has-joins.joinl {x1 , _} {y1 , _} with x1 ‚â°‚à®‚ÇÅ? y1
      ... | yes x1=x1‚à®y1 , yes _ = A-joins.joinl , Œª _ ‚Üí B-joins.joinl
      ... | yes x1=x1‚à®y1 , no  _ = A-joins.joinl , Œª _ ‚Üí B.‚â§-refl
      ... | no  x1‚â†x1‚à®y1 , yes _ = A-joins.joinl , Œª x1‚â°x1‚à®y1 ‚Üí absurd (x1‚â†x1‚à®y1 x1‚â°x1‚à®y1)
      ... | no  x1‚â†x1‚à®y1 , no  _ = A-joins.joinl , Œª x1‚â°x1‚à®y1 ‚Üí absurd (x1‚â†x1‚à®y1 x1‚â°x1‚à®y1)
      joins .has-joins.joinr {x1 , _} {y1 , _} with x1 ‚â°‚à®‚ÇÅ? y1
      ... | yes _ , yes y1=x1‚à®y1 = A-joins.joinr , Œª _ ‚Üí B-joins.joinr
      ... | yes _ , no  y1‚â†x1‚à®y1 = A-joins.joinr , Œª y1‚â°x1‚à®y1 ‚Üí absurd (y1‚â†x1‚à®y1 y1‚â°x1‚à®y1)
      ... | no  _ , yes y1=x1‚à®y1 = A-joins.joinr , Œª _ ‚Üí B.‚â§-refl
      ... | no  _ , no  y1‚â†x1‚à®y1 = A-joins.joinr , Œª y1‚â°x1‚à®y1 ‚Üí absurd (y1‚â†x1‚à®y1 y1‚â°x1‚à®y1)
      joins .has-joins.universal {x1 , _} {y1 , _} {_ , z2} x‚â§z y‚â§z with x1 ‚â°‚à®‚ÇÅ? y1
      ... | yes x1=x1‚à®y1 , yes y1=x1‚à®y1 =
        A-joins.universal (x‚â§z .fst) (y‚â§z .fst) , Œª x1vy1=z1 ‚Üí
        B-joins.universal (x‚â§z .snd (x1=x1‚à®y1 ‚àô x1vy1=z1)) (y‚â§z .snd (y1=x1‚à®y1 ‚àô x1vy1=z1))
      ... | yes x1=x1‚à®y1 , no  y1‚â†x1‚à®y1 =
        A-joins.universal (x‚â§z .fst) (y‚â§z .fst) , Œª x1vy1=z1 ‚Üí x‚â§z .snd (x1=x1‚à®y1 ‚àô x1vy1=z1)
      ... | no  x1‚â†x1‚à®y1 , yes y1=x1‚à®y1 =
        A-joins.universal (x‚â§z .fst) (y‚â§z .fst) , Œª x1vy1=z1 ‚Üí y‚â§z .snd (y1=x1‚à®y1 ‚àô x1vy1=z1)
      ... | no  x1‚â†x1‚à®y1 , no  y1‚â†x1‚à®y1 =
        A-joins.universal (x‚â§z .fst) (y‚â§z .fst) , Œª x1vy1=z1 ‚Üí B-bottom.is-bottom

  --------------------------------------------------------------------------------
  -- Bottoms

  lex-has-bottom : has-bottom A ‚Üí has-bottom B ‚Üí has-bottom (Lexicographic A B)
  lex-has-bottom A-bottom B-bottom = bottom
    where
      module A-bottom = has-bottom (A-bottom)
      module B-bottom = has-bottom (B-bottom)

      bottom : has-bottom (Lexicographic A B)
      bottom .has-bottom.bot = A-bottom.bot , B-bottom.bot
      bottom .has-bottom.is-bottom = A-bottom.is-bottom , Œª _ ‚Üí B-bottom.is-bottom
